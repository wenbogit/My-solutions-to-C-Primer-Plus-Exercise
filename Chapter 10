#include <stdio.h>

/*10.1
#define MONTHS 12
#define YEARS 5
int main(void)
{
    const float rain[YEARS][MONTHS] =
{
{4.3,4.3,4.3,3.0,2.0,1.2,0.2,0.2,0.4,2.4,3.5,6.6},
{8.5,8.2,1.2,1.6,2.4,0.0,5.2,0.9,0.3,0.9,1.4,7.3},
{9.1,8.5,6.7,4.3,2.1,0.8,0.2,0.2,1.1,2.3,6.1,8.4},
{7.2,9.9,8.4,3.3,1.2,0.8,0.4,0.0,0.6,1.7,4.3,6.2},
{7.6,5.6,3.8,2.8,3.8,0.2,0.0,0.0,0.0,1.3,2.6,5.2}
};

int year, month;
float subtot, total;

printf("  YEAR     RAINFALL   (inches)\n");
for(year=0,total=0; year<YEARS; year++)
{
    for(month=0,subtot=0;month<MONTHS;month++)
        subtot+=*(*(rain+year)+month);
    printf("%5d  %15.1f\n", 2010+year, subtot);
    total+=subtot;
}
printf("\nThe yearly average is %.1f inches.\n\n",total/YEARS);
printf("MONTHLY AVERAGE:\n\n");
printf("JAN FEB MAR APR MAY JUN JUL AUG SEP OCT NOV DEC\n");

for(month=0;month<MONTHS;month++)
{
    for (year=0,subtot=0;year<YEARS;year++)
        subtot+=*(*(rain+year)+month);
    printf("%4.1f",subtot/YEARS);
}
printf("\n");

return 0;

}
*/

/*10.2
void copy_arr(double target1[], double source[], int index);
void copy_ptr(double *target2, double *source, int index);
void copy_ptrs(double *target3, double *souce, int index);
int main(void)
{
    double source[5]={1.1,2.2,3.3,4.4,5.5};
    double target1[5];
    double target2[5];
    double target3[5];

    printf("The answer of first target should be: \n");
    copy_arr(target1, source, 5);
    putchar('\n');
    printf("The answer of second target should be: \n");
    copy_ptr(target2, source, 5);
    printf("\n");
    printf("The answer of third target should be: \n");
    copy_ptrs(target3, source, 5);
    putchar('\n');

    return 0;
}

void copy_arr(double target1[], double source[], int index)
{
    int i;
    for(i=0;i<index;i++)
    {
        target1[i]=source[i];
        printf("%.1f ",target1[i]);
    }
}

void copy_ptr(double *target2, double *source, int index)
{
    int i;
    for(i=0;i<index;i++)
    {
        *(target2+i)=*(source+i);
        printf("%.1f ", *(target2+i));
    }
}


void copy_ptrs(double *target3, double *souce, int index)
{
    int i;
    for(i=0;i<index;i++)
    {
        *(target3+i)=*(souce+i)+5;
        printf("%.1f ", *(target3+i));
    }
}
*/
/*10.3
#define INDEX 10
void show(int *a, int index);
int maximum(const int a[], int index);
int main(void)
{
    int max;
    int value[INDEX]={4,3,4,565,45,32,54,75,432,999};
    printf("The original numbers are: \n");
    show(value, INDEX);
    putchar('\n');
    max=maximum(value, INDEX);
    printf("The max number is %d\n", max);

    return 0;
}

void show(int *a, int index)
{
    int i;
    for(i=0;i<index;i++)
        printf("%d ", *(a+i));
}

int maximum(const int a[], int index)
{
    int j, max;
    max=a[0];

    for(j=1;j<index;j++)
    {
        if(max<a[j])
            max=a[j];
    }
    return max;
}
*/
/*10.4
#define INDEX 10
void show(double *a, int index);
double maximum(const double a[], int index);
int main(void)
{
    int ans;
    double value[INDEX]={4.4,3.5,4.5,565.3,45.3,32.5,54.5,75.8,432.4,99.7};
    printf("The original numbers are: \n");
    show(value, INDEX);
    putchar('\n');
    ans=maximum(value, INDEX);
    printf("The index of the max number is %d\n", ans);

    return 0;
}

void show(double *a, int index)
{
    int i;
    for(i=0;i<index;i++)
        printf("%.1f ", *(a+i));
}

double maximum(const double a[], int index)
{
    int j,ans;
    double max;
    max=a[0];

    for(j=1;j<index;j++)
    {
        if(max<a[j])
            max=a[j];
    }
    for(j=0;j<index;j++)
    {
        if(a[j]==max)
            ans=j+1;
    }
    return ans;

}
*/
/*10.5
#define INDEX 10
void show(double *a, int index);
double maximum(const double a[], int index);
int main(void)
{
    double ans;
    double value[INDEX]={4.4,3.5,4.5,565.3,45.3,32.5,54.5,75.8,432.4,99.7};
    printf("The original numbers are: \n");
    show(value, INDEX);
    putchar('\n');
    ans=maximum(value, INDEX);
    printf("The difference between the largest and smallest elements is %.1f\n", ans);

    return 0;
}

void show(double *a, int index)
{
    int i;
    for(i=0;i<index;i++)
        printf("%.1f ", *(a+i));
}

double maximum(const double a[], int index)
{
    int j,ans;
    double max=a[0];
    double min=a[9];

    for(j=1;j<index;j++)
    {
        if(max<a[j])
            max=a[j];
    }

    for(j=8;j>=0;j--)
    {
        if(min>a[j])
            min=a[j];
    }
    return max-min;

}
*/

/*10.6
#define INDEX 10
void show(double *a, int index);
void transfer(double a[], int index);

int main(void)
{
    double value[INDEX]={4.4,3.5,4.5,565.3,45.3,32.5,54.5,75.8,432.4,99.7};
    printf("The original numbers are: \n");
    show(value, INDEX);
    putchar('\n');
    putchar('\n');
    printf("The reverse contents of the array is: \n");
    transfer(value, INDEX);
    putchar('\n');

    return 0;
}

void show(double *a, int index)
{
    int i;
    for(i=0;i<index;i++)
        printf("%.1f ", *(a+i));
}

void transfer(double a[], int index)
{
    int i,j;
    double b[10];
    for(i=0,j=9;i<index,j>=0;i++,j--)
    {
        b[j]=a[i];
    }
    for(j=0;j<index;j++)
        printf("%.1f ", b[j]);

}
*/
/*10.7
#define ROWS 5
#define COLS 2
void copy_arr(double target1[][2], int rows);

int main(void)
{
    double source[ROWS][COLS]={{1.1,1.0}, {2.2,2.0}, {3.3,3.0}, {4.4,4.0}, {5.5,5.0}};

    printf("The copied answer should be: \n");
    copy_arr(source, ROWS);

    return 0;
}

void copy_arr(double target1[][2], int rows)
{
    int r;
    int c;

    for(r=0;r<rows;r++)
    {
        for(c=0;c<COLS;c++)
        printf("%.1f ", target1[r][c]);
        putchar('\n');
    }

}
*/
/*10.8
#define INDEX 3
void copy_arr(const double target[3], int index);

int main(void)
{
    double source[7]={1.1,2.2,3.3,4.4,5.5,6.6,7.7};

    printf("The answer should be: \n");
    copy_arr(&source[2], INDEX);

    putchar('\n');

    return 0;
}

void copy_arr(const double target[3], int index)
{
    int i;
    for(i=0;i<index;i++)
    {
        printf("%.1f ", target[i]);
    }
}
*/
/*10.9
void copy(int row,int col,double original[row][col]);
void display(int row,int col,double display[row][col]);

int main(void)
{
    int r=3;
    int c=5;

    double originals[3][5]={{1.1,2.1,3.1,4.1,5.1},{1.2,2.2,3.2,4.2,5.2},{1.3,2.3,3.3,4.3,5.3}};

    printf("The original value should be: \n");
    display(r,c,originals);
    putchar('\n');

    printf("The copied value should be: \n");
    copy(r,c,originals);

    return 0;
}

void copy(int row,int col,double original[row][col])
{
    int i,j;
    for(i=0;i<row;i++)
    {
        for(j=0;j<col;j++)
            printf("%.1f ", original[i][j]);
        putchar('\n');
    }

}

void display(int row,int col,double display[row][col])
{
    int i,j;
    for(i=0;i<row;i++)
    {
        for(j=0;j<col;j++)
            printf("%.1f ", display[i][j]);
        putchar('\n');
    }
}
*/
/*10.10
#define SIZE 4
void sum(int a1[], int a2[], int a3[], int size);
int main(void)
{
    int array1[SIZE]={2,4,5,8};
    int array2[SIZE]={1,0,4,6};

    int array3[SIZE];
    printf("The value of array 3 should be: \n");
    sum(array1, array2, array3, SIZE);

    return 0;
}

void sum(int a1[], int a2[], int a3[], int size)
{
    int i;
    for(i=0;i<size;i++)
    {
        a3[i]=a1[i]+a2[i];
        printf("%d ", a3[i]);
    }
    putchar('\n');
}
*/
/*10.11
#define ROW 3
#define COL 5
void display(int to_be_display[][COL], int rows);
void double_value(int val_double[][COL], int rows);

int main(void)
{
    int originals[3][5]={{1,2,3,4,5},{6,7,8,9,10},{11,12,13,14,15}};

    printf("The initial values are: \n");
    display(originals, ROW);
    printf("The doubled values are: \n");
    double_value(originals, ROW);

    return 0;
}

void display(int to_be_display[][COL], int rows)
{
    int i,j;

    for(i=0;i<rows;i++)
        for(j=0;j<COL;j++)
    {
        printf("%d ", to_be_display[i][j]);
    }
    putchar('\n');
}

void double_value(int val_double[][COL], int rows)
{
    int i,j;
    for(i=0;i<rows;i++)
        for(j=0;j<COL;j++)
    {
        val_double[i][j]=val_double[i][j]*2;
        printf("%d ", val_double[i][j]);
    }
    putchar('\n');

}
*/
