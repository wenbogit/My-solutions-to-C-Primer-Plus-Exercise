#include <stdio.h>
#include <ctype.h>

/*11.1
#define LEN 10
char * getnchar(char * str, int n);

int main(void)
{
    char input[LEN];
    char *check;

    check = getnchar(input, LEN - 1);
    if (check == NULL)
        puts("Input failed.");
    else
        puts(input);
    puts("Done.\n");

    return 0;
}

char * getnchar(char * str, int n)
{
    int i;
    int ch;

    for (i = 0; i < n; i++)
        {
            ch = getchar();
            if (ch != EOF)
                str[i] = ch;
            else
            break;
        }

    if (ch == EOF)
        return NULL;
    else
        {
            str[i] = '\0';
            return str;
        }
}
*/

/*11.2
#define LEN 10
char * getnchar(char * str, int n);

int main(void)
{
    char input[LEN];
    char *check;

    check = getnchar(input, LEN - 1);
    if (check == NULL)
        puts("Input failed.");
    else
        puts(input);
    puts("Done.\n");

    return 0;
}

char * getnchar(char * str, int n)
{
    int i;
    int ch;

    for (i = 0; i < n; i++)
        {
            ch = getchar();
            if (ch == EOF||ch == '\n'||ch == ' '||ch == '\t')
                break;
            else
                str[i] = ch;
        }

    if (ch == EOF)
        return NULL;
    else
        {
            str[i] = '\0';
            return str;
        }
}
*/

/*11.3
void first_word(char ch);

int main(void)
{
    puts("Please enter your input:");
    char ch1;
    ch1=getchar();
    first_word(ch1);

    return 0;
}

void first_word(char ch)
{

    while(ch!=EOF)
    {
        if(isspace(ch))
            break;
        else
        {
            putchar(ch);
            ch=getchar();
        }
    }
    putchar('\n');
    puts("Done.");

}
*/

/*11.4
#define STLEN 40
char * s_gets(char *words, int n);

int main(void)
{
    int num;
    char word[STLEN];
    puts("Enter the limits of number can be read:");
    scanf("%d", &num);
    while(getchar()!='\n')
        continue;

    puts("Enter strings:");
    if(s_gets(word, num))
    {
        puts(word);
    }

    return 0;
}

char * s_gets(char *words, int n)
{
    char *ans;
    int i=0;
    ans=fgets(words, n+1, stdin);
    if(ans)
        {
            while(words[i]!='\n' && words[i]!= ' '&& words[i]!= '\0' && words[i]!= '\t')
                i++;
            if(words[i]=='\n'||words[i]==' '||words[i]=='\t')
                words[i]='\0';
            else
                while(getchar()!='\n')
                continue;
        }
        return ans;
}
*/

/*11.5
#define SIZE 30
char *func_search(char *list, char j);

int main(void)
{
    char t;
    char lists[SIZE]= "This is bar test program.";
    for(t='a';t<'c';t++)
        func_search(lists, t);

    return 0;
}

char *func_search(char *list, char j)
{
    int i;

    for(i=0; i<SIZE; i++)
    {
        if(list[i]==j)
    {
        printf("The rest of the string should be: \n");
        puts(list+i);
        break;
    }

    }
        return NULL;
}
*/

/*11.6
#define SIZE 30
int is_within(char *list, char j);

int main(void)
{
    char t;
    char lists[SIZE]= "This is bar test program.";
    for(t='a';t<='g';t++)
    {
        if(is_within(lists, t))
        printf("The character %c is in the string.\n", t);
    }

    return 0;
}

int is_within(char *list, char j)
{
    int i;
    int m;

    for(i=0,m=0; i<SIZE; i++)
    {
        if(list[i]==j)
            m=1;
    }
    return m;
}
*/
/*11.7
#define SIZE 30
char *mystrncpy(char *strDest , const char *strSrc , int n);

int main(void)
{
    char lists[SIZE]= "This is bar test program.";
    char ar[100];

    mystrncpy(ar, lists, 10);
    puts(ar);

    return 0;
}

char *mystrncpy(char *strDest , const char *strSrc , int n)
{
    char *address = strDest;
    while(n-- > 0)
        *strDest++ = *strSrc++;
    return address;
}
*/
